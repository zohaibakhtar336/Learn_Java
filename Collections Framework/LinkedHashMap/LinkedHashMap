// LinkedHashMap is a part of the Java Collections Framework and extends the HashMap class.
// It is a hash table and linked list implementation of the Map interface, which means it combines 
// the features of both HashMap (provides fast lookups based on hash codes) and LinkedList 
// (maintains the order of elements based on insertion or access order).

// Key Characteristics of LinkedHashMap:
// 1. It maintains the insertion order or the order in which elements are added to the map.
// 2. It uses a doubly linked list to maintain the order of elements, unlike HashMap which does not 
//    guarantee any order of elements.
// 3. It allows null values and the null key (like HashMap).
// 4. It is not synchronized, which means it is not thread-safe by default.

// Constructor Variants:
// 1. LinkedHashMap(): Initializes an empty LinkedHashMap with default capacity and load factor.
// 2. LinkedHashMap(int initialCapacity): Initializes a LinkedHashMap with a specified initial capacity.
// 3. LinkedHashMap(int initialCapacity, float loadFactor): Initializes with a specified initial capacity 
//    and load factor.
// 4. LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder): 
//    This variant allows specifying whether the order should be based on insertion or access.
//    - If accessOrder is set to true, the order will be maintained based on the most recently accessed entries.
//    - If accessOrder is set to false, the order will be based on the insertion order (default behavior).

// Important Differences between LinkedHashMap and HashMap:
// 1. Insertion Order: 
//    - LinkedHashMap maintains the order of elements as they were inserted, whereas HashMap has no 
//      guaranteed order.
// 2. Performance:
//    - LinkedHashMap has slightly lower performance compared to HashMap due to the additional overhead 
//      of maintaining the order of elements using the linked list.
// 3. Ordering: 
//    - LinkedHashMap offers the option to change the ordering to access order (entries are ordered 
//      based on the most recently accessed elements).
//    - HashMap does not maintain any order by default.

// Use Cases:
// 1. When the order of elements matters: LinkedHashMap is useful when you need to maintain the order 
//    of elements based on insertion or access.
// 2. When cache-like behavior is required: Setting the accessOrder flag to true makes LinkedHashMap 
//    ideal for implementing caches, as the most recently accessed entries can be placed at the 
//    end of the map.

// Performance Consideration:
// 1. Lookup operations (get, put) in LinkedHashMap are generally faster than TreeMap but slightly slower 
//    than HashMap due to the added overhead of maintaining the linked list for order.
// 2. If order doesn't matter, HashMap might be a better choice for better performance.
// 3. If order matters and insertion order is sufficient, LinkedHashMap is a good choice with minimal 
//    performance trade-off.

// Iteration Order:
// 1. When iterating over the entries of a LinkedHashMap, the iteration occurs in the order in which 
//    the entries were inserted (if accessOrder is false) or in the order in which the entries were 
//    last accessed (if accessOrder is true).
// 2. LinkedHashMap provides a predictable iteration order, unlike HashMap, which may not maintain 
//    any predictable order.

// Null Handling:
// 1. LinkedHashMap allows null values for both keys and values (similar to HashMap).
// 2. However, you cannot have more than one null key in the map, as it violates the uniqueness constraint 
//    of keys.

// Access Order:
// 1. When accessOrder is set to true, the most recently accessed entry (either through get or put) 
//    is moved to the end of the map, maintaining a "least recently used" (LRU) order.
// 2. This makes it suitable for scenarios like implementing an LRU cache where elements that are accessed 
//    frequently should stay in the map, and the least recently accessed ones are evicted when the map 
//    exceeds its capacity.

// Default Load Factor:
// 1. LinkedHashMap uses a default load factor of 0.75, which determines when the map should resize.
// 2. When the map's capacity exceeds the product of its load factor and the current size, the map will 
//    resize and rehash its entries.

// Conclusion:
// 1. LinkedHashMap provides the functionality of a HashMap while maintaining a predictable order of 
//    elements (insertion or access order).
// 2. It is a good choice when you need to maintain the order of elements or need cache-like behavior 
//    (with accessOrder set to true).
// 3. Although it comes with some performance trade-offs compared to HashMap, its predictable iteration 
//    and order-maintenance features make it an essential tool in Java.
