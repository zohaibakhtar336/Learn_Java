// ArrayList is a class that implements the List interface in the Java Collections Framework.
// It provides a resizable array that can hold elements of any type.

// 1. Characteristics of ArrayList
/*
    - It is a dynamic array, which means it can grow or shrink as elements are added or removed.
    - It allows duplicate elements, i.e., it can contain multiple occurrences of the same element.
    - It maintains the insertion order, meaning the elements are stored in the order they are added.
    - It allows random access to elements via indices.
    - The elements in an ArrayList are indexed, starting from 0.
    - It allows `null` values.
*/

// 2. Internal Structure
/*
    - Internally, ArrayList uses an array to store its elements.
    - The array is resized automatically when the number of elements exceeds the current capacity of the list.
    - When the list grows, a new, larger array is created, and the old elements are copied into the new array.
    - This resizing operation can be costly, so itâ€™s best to initialize the ArrayList with an appropriate initial capacity if the size is known in advance.
*/

// 3. Constructors
/*
    - ArrayList provides several constructors to initialize the list:
    
    1. **ArrayList()**: Creates an empty ArrayList with an initial capacity of 10.
    2. **ArrayList(int initialCapacity)**: Creates an empty ArrayList with a specified initial capacity.
    3. **ArrayList(Collection<? extends E> c)**: Creates an ArrayList that contains the elements of the specified collection.
*/

// 4. Common Methods in ArrayList
/*
    - **add(E element)**: Adds the specified element to the end of the list. If the element is added successfully, it returns `true`.
    - **add(int index, E element)**: Inserts the specified element at the specified position in the list.
    - **get(int index)**: Returns the element at the specified position in the list.
    - **set(int index, E element)**: Replaces the element at the specified position with the specified element.
    - **remove(Object o)**: Removes the first occurrence of the specified element from the list.
    - **remove(int index)**: Removes the element at the specified index.
    - **clear()**: Removes all the elements from the list.
    - **size()**: Returns the number of elements in the list.
    - **isEmpty()**: Returns `true` if the list contains no elements.
    - **contains(Object o)**: Returns `true` if the list contains the specified element.
    - **indexOf(Object o)**: Returns the index of the first occurrence of the specified element.
    - **lastIndexOf(Object o)**: Returns the index of the last occurrence of the specified element.
    - **toArray()**: Converts the ArrayList into an array.
    - **subList(int fromIndex, int toIndex)**: Returns a view of the portion of the list between the specified indices.
*/

// 5. Performance Characteristics
/*
    - **Random Access**: ArrayList allows fast access to elements by index (constant time complexity, O(1)).
    - **Add/Remove Elements**: Adding elements at the end of the list is generally O(1) amortized, but inserting or removing elements at arbitrary positions can be slow (O(n)) due to the need to shift other elements.
    - **Resizing**: When the ArrayList exceeds its capacity, it resizes itself, which can be an expensive operation (O(n)).
    - **Iteration**: Iterating over an ArrayList (using an iterator or for-each loop) is O(n), as all elements must be visited.
*/

// 6. Use Cases
/*
    - ArrayList is best suited for applications where:
      - Fast random access to elements is required.
      - The number of elements varies, and the list grows or shrinks dynamically.
      - The list may contain duplicate elements.
    - It is not ideal for scenarios where frequent insertions or deletions from the middle of the list are required.
*/

// 7. Synchronization and Thread Safety
/*
    - ArrayList is **not thread-safe**. If multiple threads access an ArrayList concurrently and at least one thread modifies the list, it must be synchronized externally.
    - If thread safety is required, you can use `Collections.synchronizedList(new ArrayList<>());` to wrap the list in a synchronized version.
    - Alternatively, `CopyOnWriteArrayList` can be used for thread-safe access in concurrent environments.
*/

// 8. Comparisons with Other List Implementations
/*
    - **ArrayList vs LinkedList**: 
      - ArrayList uses an array to store elements, providing fast access (O(1)) but slow insertions/removals (O(n)) except at the end.
      - LinkedList uses a doubly linked list, providing fast insertions/removals (O(1)) but slower access (O(n)).

    - **ArrayList vs Vector**:
      - Both ArrayList and Vector are resizable arrays, but Vector is synchronized and tends to be slower in single-threaded environments.
      - Vector increases its size by doubling it when it runs out of space, while ArrayList typically increases by 50%.
*/

// 9. Example Use Case
/*
    - ArrayList is typically used when you need to maintain an ordered collection of elements, 
      with fast access by index, such as:
      - Storing items in a dynamic list (e.g., a list of products in a shopping cart).
      - Implementing dynamic data structures that require random access.
*/
